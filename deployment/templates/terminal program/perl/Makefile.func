#
# Motor IDE functional Makefile template
# 	for terminal program in perl
#
# Written by Konstantin Klyagin <konst@konst.org.ua>
# Distributed under the GNU Public License

# Project settings and files

SCRIPTS = [loop 0;{fscript};1][value fscript.{^loopvalue}] [loopend]
DOCS = [loop 0;{fdoc};1][value fdoc.{^loopvalue}] [loopend]
MISCF = [loop 0;{fmisc};1][value fmisc.{^loopvalue}] [loopend]
BUILDF = [loop 0;{fbuild};1][value fbuild.{^loopvalue}] [loopend]
ALL_FILES := $(strip $(SCRIPTS) $(MISCF) $(DOCS))
ALL_DIRS := $(sort $(dir $(ALL_FILES)))
PROJNAME = [value name]
PROJVER = [value version]
PROG = [value name]
DIST_TARGZ := $(PROJNAME)-$(PROJVER).tar.gz
WANT = WANT_AUTOCONF=2.1 WANT_AUTOMAKE=1.4

# Motor specific targets

# Executed every time there is a need to compile the stuff

build:

# Executed to make sure the build environment is ready

ready:[if {makefmode} = automake]
	@if test ! -f Makefile.am; then $(MAKE) -f Makefile.func automake; fi
	@if test ! -f Makefile.in; then $(WANT) automake; fi
	@if test ! -f configure; then $(WANT) autoconf; fi
	@if test ! -f Makefile; then \
	    ./configure; \
	fi[endif]

# Invoked for cleaning up

clean: ready
	$(MAKE)[if {makefmode} = automake] distclean[else] clean[endif]

# This one starts the debugger

debug:
#	exec gdb --fullname -silent -tty `cat .debugtty && rm -f .debugtty` `find . -name "$(PROG)" -type f`
	dtty=`cat .debugtty && rm -f .debugtty`; \
	exec perl -d [value fscript.0] >$$dtty <$$dtty 2>/dev/stdout

# Runs the program

run:
	perl [value fscript.{0}]

# Executed on project creation

start:[if {makefmode} = automake] automake[endif] makesure

# Executed on project modification

update:[if {makefmode} = automake] automake
	rm -f config.cache && CFLAGS="-O0 -g" CXXFLAGS="-O0 -g" ./configure[endif]

#
# Add connected libs into the distribution package
#

distextra:[loop 0;{fconnectedlib};1]
	[if {^loopvalue} = 0]@[endif]rldir="[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]"; \
	ldir=`echo "$${rldir}" | sed 's/\//\\\\\//g;s/\ /\\\ /g'`; \
	gmask="$${gmask};s/^EXTRA_DIST\(.*\)$$/EXTRA_DIST\1 $${ldir}\/*/g"; \[loopend]
	if test ! -z "$$gmask"; then \
	    sed "$$gmask" <Makefile.am >Makefile.am.motmp; \
	    mv Makefile.am.motmp Makefile.am; \
	fi

#
# Modify the Makefile.am thus connected libraries are to compile
# don't forget to replace dirs in -L and -I
#

linklibs:[loop 0;{fconnectedlib};1]
	ln -sf "[value fconnectedlib.{^loopvalue}.rootdir]" "[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]"
	cd "[value fconnectedlib.{^loopvalue}.rootdir]"; $(MAKE) -f Makefile.func clean ready[loopend]

distlib: linklibs
	@echo -e "distclean: motorc-distclean\nclean: motorc-clean" >Makefile.am.motmp
	@echo -e "\nmotorc-clean:" >>Makefile.am.motmp[loop 0;{fconnectedlib};1]
	@echo -e "\tcd \"[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]\"; $(MAKE) clean" >>Makefile.am.motmp[loopend]
	@echo -e "\nmotorc-distclean:" >>Makefile.am.motmp[loop 0;{fconnectedlib};1][move mm=fconnectedlib.{^loopvalue}.makefmode]
	@echo -e "\tcd \"[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]\"; $(MAKE) [if {mm} = automake]dist[endif]clean" >>Makefile.am.motmp[loopend]
	@echo -e "\ndist-hook:\n\t@-cd \044(top_distdir); find . -regex \"\./[l]^/[r]+/.+\.spec\044\044\" -exec rm -f {} \;; find . -name CVS -type d -exec rm -rf {} \;; \\" >>Makefile.am.motmp
	@echo -e -n "\tfname=\`egrep \"^[l][l]:space:[r][r]*bin_PROGRAMS\" $(BUILDF) | awk 'BEGIN { FS = \":\" } { print \044\0441 }'\`" >>Makefile.am.motmp
	@echo "; echo -e \"CXXLINK = dcur=\\\`pwd\\\`;[loop 0;{fconnectedlib};1] cd \044(top_srcdir)/[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]; \044(MAKE); cd \044\044dcur;[loopend] \044(CXXLD) \044(AM_CXXFLAGS) \044(CXXFLAGS) \044(LDFLAGS) -o \044@ \044(LOADLIBES) \044(LDLIBS)\" >mmakeftmp; \\" >>Makefile.am.motmp
	@echo -e "\tcat \044\044fname >>mmakeftmp; mv mmakeftmp \044\044fname; $(WANT) automake -a -c" >>Makefile.am.motmp
	@echo -e "\n# END OF MOTOR DIST TARGETS #" >>Makefile.am.motmp
	@cat Makefile.am >>Makefile.am.motmp
	@mv Makefile.am.motmp Makefile.am; \
	\
	cat configure.in | egrep -v "^[l][l]:space:[r][r]*AC_OUTPUT|^[l][l]:space:[r][r]*AC_CONFIG_SUBDIRS" >mcnftmp; \
	libdirs="[loop 0;{fconnectedlib};1] [value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version][loopend]"; \
	if test -n "$$libdirs"; then \
	    libdirs=`echo $$libdirs | sed 's/^\s+|\s+$$//g'`; \
	    echo "AC_CONFIG_SUBDIRS($$libdirs)" >>mcnftmp; \
	fi; \
	cat configure.in | egrep "^[l][l]:space:[r][r]*AC_OUTPUT" >>mcnftmp; \
	mv mcnftmp configure.in; \
	\
	for file in `find . -name Makefile.am`; do \[loop 0;{fconnectedlib};1]
	    fromdir=`echo "[value fconnectedlib.{^loopvalue}.rootdir]" | sed 's/\//\\\\\//g;s/\ /\\\ /g;s/\./\\\./g'`; \
	    realfd=`(cd "[value fconnectedlib.{^loopvalue}.rootdir]"; pwd -P) | sed 's/\//\\\\\//g;s/\ /\\\ /g;s/\./\\\./g'`; \
	    todir=`echo -e "\\044(top_srcdir)/[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]" | sed 's/\//\\\\\//g'`; \
	    rsed="$${rsed};s/$${fromdir}/$${todir}/g"; \
	    if test "$$fromdir" != "$$realfd"; then rsed="$${rsed};s/$${realfd}/$${todir}/g"; fi; \[loopend]
	    if test ! -z "$$rsed"; then \
		cat $$file | sed $$rsed >>$${file}.motmp; \
		mv $${file}.motmp $$file; \
	    fi; \
	done

distcleanup:[loop 0;{fconnectedlib};1]
	@rm -f "[value fconnectedlib.{^loopvalue}.name]-[value fconnectedlib.{^loopvalue}.version]"[loopend]
	@cat Makefile.am | perl -e "while(<STDIN>) { chomp; push (@toshow, \$$_); @toshow = () if \$$_ eq '# END OF MOTOR DIST TARGETS #'; }; print map { \$$_, \"\n\" } @toshow;" >Makefile.am.motmp
	@mv Makefile.am.motmp Makefile.am

dist: [if {makefmode} = automake]makesure distcleanup automake distextra distlib
	@-$(WANT) autoconf; automake -a -c
	@if test ! -f Makefile; then ./configure --cache-file=[value rootdir]/config.cache; fi[endif]
	$(MAKE) dist[if x{packoutdir} ! x][if {packoutdir} ! {rootdir}]
	-if test -d [value packoutdir]; then mv $(DIST_TARGZ) [value packoutdir]; fi[endif][endif]
	$(MAKE) -f Makefile.func distcleanup automake

rpmspec:
	@if test ! -f [value name].spec; then \
	    echo "[value name].spec file not found!"; \
	    exit 1; \
	fi
	@sed "s/^[l][l]:space:[r][r]*Version\: .*$$/Version: $(PROJVER)/g" <[value name].spec >[value name].spec.uver
	@if test -z "`egrep '^[l][l]:space:[r][r]*BuildRoot: ' [value name].spec`"; then \
	    echo "BuildRoot: /var/tmp/%{name}-buildroot" >[value name].spec; \
	    cat [value name].spec.uver >>[value name].spec; \
	else \
	    mv [value name].spec.uver [value name].spec; \
	fi
	@rm -f mv [value name].spec.uver

rpm: rpmspec dist
	@if test ! -f ~/.motor/rpmrc; then \
	    echo "macrofiles:	/usr/lib/rpm/macros:/usr/lib/rpm/%{_target}/macros:/etc/rpm/macros.specspo:/etc/rpm/macros:/etc/rpm/%{_target}/macros:~/.rpmmacros:~/.motor/rpmmacros" >~/.motor/rpmrc; \
	fi
	@if test ! -f ~/.motor/rpmmacros; then \
	    echo "%_topdir	$${HOME}/.motor/rpm"	>>~/.motor/rpmmacros; \
	    echo "%_builddir	%{_topdir}/BUILD"	>>~/.motor/rpmmacros; \
	    echo "%_rpmdir	%{_topdir}/RPMS"	>>~/.motor/rpmmacros; \
	    echo "%_sourcedir	%{_topdir}/SOURCES"	>>~/.motor/rpmmacros; \
	    echo "%_specdir	%{_topdir}/SPECS"	>>~/.motor/rpmmacros; \
	    echo "%_srcrpmdir	%{_topdir}/SRPMS"	>>~/.motor/rpmmacros; \
	    echo "%_tmppath	%{_var}/tmp"		>>~/.motor/rpmmacros; \
	fi
	@-for i in SPECS BUILD RPMS SRPMS; do mkdir -p "$${HOME}/.motor/rpm/$$i"; done
	unset LINGUAS; rpmbuild -ta --rcfile ~/.motor/rpmrc $${rpmtarget:+--target} $${rpmtarget} [value packoutdir]/$(DIST_TARGZ)
	find "${HOME}/.motor/rpm" -name "$(PROJNAME)-$(PROJVER)*rpm" -exec mv {} "[value packoutdir]" \;
	rm -rf "${HOME}/.motor/rpm"

[if {makefmode} = automake]#
# mfdetect(currentfiles) returns
#	1 - root dir	2 - prog dir
#	3 - lib dir	4 - doc dir
#	5 - misc dir
#
# finlist(currentfiles, setof) $result to the list of files matched
#
# variables
#	rfnames - files in the current directory (with relative path names)
#	fnames  - files in the current directory (filenames only)
#	dnames  - current dir subdirectories
#
automake:
	@rootfound=0; \
	cflgs="[value compileroptions]"; \
	if test ! -z "$(INCLDIRS)"; then \
	    idirs=`for i in $(addprefix -I, $(INCLDIRS)); do (echo -n "$$i " | \
		grep -v "^-I/" | sed 's/^-I/-I\\\\044(top_srcdir)\//g'); done; \
		for i in $(addprefix -I, $(INCLDIRS)); do (echo -n "$$i " | \
		grep "^-I/"); done`; \
	    idirs=`echo $$idirs | sed "s/\n//g"`; \
	fi; \
	[if gettextized]idirs="$${idirs} -I\044(top_srcdir)/intl"; \
	[endif]idirs=`echo -e "$$idirs"`; \
	amfnames=""; \
	plibs="$(LDADD)"; \
	\
	finlist () { \
	    result=""; \
	    for i in $$1; do \
		gmask=`echo $$i | sed 's/\//\\\\\//g' | sed 's/\./\\\\\./g'`; \
		gmask="\<$$gmask\>"; \
		if test ! -z "`echo $$2 | egrep $$gmask`"; then \
		result="$$result $$i"; fi; \
	    done; \
	}; \
	mfdetect () { \
	    finlist "$$1" "$(SOURCES)"; \
	    if test ! -z "$$result"; then \
		if test "$$rootfound" = "0"; then \
		rootfound=1; return 2; else \
		return 3; fi; \
	    fi; \
	    finlist "$$1" "$(DOCS)"; \
	    if test ! -z "$$result"; then return 4; fi; \
	    return 5; \
	}; \
	getlastword () { \
	    result=`echo $$1 | sed "s/^\(.*\)\/\([l]^/[r]\+\)\/$$/\2/g" | sed "s/\///g"`; \
	}; \
	filteram () { \
	    if test -f $$1; then egrep -v "^[l]^#[r]+_PROGRAMS|^[l]^#[r]+_SOURCES|^[l][l]:space:[r][r]*EXTRA_DIST|^[l][l]:space:[r][r]*AUTOMAKE_OPTIONS|^[l]^#[r]+_LIBRARIES|^[l][l]:space:[r][r]*SUBDIRS|^[l][l]:space:[r][r]*INCLUDES|^[l][l]:space:[r][r]*CPPFLAGS|^[l][l]:space:[r][r]*CFLAGS|^[l]^#[r]+_LDADD|^[l]^#[r]+_LDFLAGS" $$1 >$${1}.motmp; \
	    else touch $${1}.motmp; fi; \
	    echo -n >$$1; \
	}; \
	extractsubdirs () { dextracted=""; \
	    for ndir; do \
		pathcomp=""; \
		set `echo ":$$ndir" | sed -ne 's/^:\//#/;s/^://;s/\// /g;s/^#/\//;p'`; \
		if test "$$ndir" != "po/" -a "$$ndir" != "./po/" -a "$$ndir" != "intl/" -a "$$ndir" != "./intl/"; then \
		for d; do pathcomp="$$pathcomp$$d"; \
		    pathcomp="$$pathcomp/"; \
		    dextracted="$$dextracted $$pathcomp"; \
		    if test $$pathcomp = "./"; then pathcomp=""; fi; \
		done; fi; \
	    done; \
	    dextracted=`for i in $$dextracted; do echo $$i; done | sort -u`; \
	}; \
	\
	extractsubdirs ./ $(ALL_DIRS); \
	echo "$$dextracted" >.dextracted; \
	for dir in $$dextracted; do \
	    if test "$$dir" = "./"; then dir=""; fi; \
	    gmask="^$$dir[l]^/[r]+$$"; \
	\
	    if test ! -z "$(ALL_FILES)"; then \
		rfnames=`for i in $(ALL_FILES); do echo $$i | egrep $$gmask; done`; \
		rfnames=`echo $$rfnames | sed "s/\n//g"`; \
	    fi; \
	    if test ! -z "$$dir"; then \
		gmask="s/`echo $$dir | sed 's/\//\\\\\//g'`//g"; \
		fnames=`echo $$rfnames | sed $$gmask`; \
		gmask="^$$dir[l]^/[r]+/$$" ;\
	    else \
		fnames="$$rfnames"; \
		gmask="^[l]^.[r][l]^/[r]*/$$" ;\
	    fi; \
	    if test -f "$${dir}[value name].spec"; then fnames="$$fnames [value name].spec"; fi; \
	\
	    dnames=`for i in $$dextracted; do echo $$i | egrep $$gmask; done`; \
	    dnames=`echo $$dnames | sed "s/\n//g"`; \
	    if test ! -z "$$dir"; then \
		gmask="s/`echo $$dir | sed 's/\//\\\\\//g'`//g"; \
		dnames=`echo $$dnames | sed $$gmask`; \
	    fi; \
	    dnames=`echo $$dnames | sed "s/\///g"`; \
	\
	    mfdetect $$rfnames; tmf=$$?; \
	    amfname="$${dir}Makefile.am"; filteram $$amfname; \
	    amfnames="$$amfnames $$amfname"; \
	    case "$$tmf" in \
		2) pdir="$$dir"; \
		   pfnames="$$fnames"; \
		   pdnames="$$dnames"; \
		   ;; \
		3) getlastword $$dir; lib=$$result; \
		   finlist "$$fnames" "$(SOURCES)"; \
		   if test ! -z "$$result"; then \
		       if test ! -z "$$idirs"; then echo "INCLUDES = $$idirs" >>$$amfname; fi; \
		       if test ! -z "$$cflgs"; then \
		           echo "CPPFLAGS = $$cflgs" >>$$amfname; \
		       fi; \
		       lib=`echo $$lib | sed 's/[l]-.,[r]/_/g'`; \
		       echo "noinst_LIBRARIES = lib$${lib}.a" >>$$amfname; \
		       echo "lib$${lib}_a_SOURCES =$${result}" >>$$amfname; \
		       plibs="$${plibs} ./$${dir}lib$${lib}.a"; \
		   fi; ;; \
		4) ;; \
	    esac; \
	    if test ! -z "$$fnames"; then echo "EXTRA_DIST = $$fnames" >>$$amfname; fi; \
	    if test ! -z "$$dnames"; then echo "SUBDIRS = $$dnames" >>$$amfname; fi; \
	    if test -z "$$dir"; then echo "AUTOMAKE_OPTIONS = foreign" >>$$amfname; fi; \
	    cat $${amfname}.motmp >>$$amfname; rm -f $${amfname}.motmp; \
	done; \
	amfname="$${pdir}Makefile.am"; filteram $$amfname; \
	amfnames="$$amfnames $$amfname"; \
	prog=$(notdir $(PROG)); \
	prog=`echo $$prog | sed 's/[l]-.,[r]/_/g'`; \
	if test ! -z "$$idirs"; then echo "INCLUDES = $$idirs" >>$$amfname; fi; \
	if test ! -z "$$cflgs"; then \
	    echo "CPPFLAGS = $$cflgs" >>$$amfname; \
	fi; \
	finlist "$$pfnames" "$(SOURCES)"; \
	echo "bin_PROGRAMS = $$prog" >>$$amfname; \
	echo "$${prog}_SOURCES =$${result}" >>$$amfname; \
	pldflags="$(LDFLAGS)"; \
	if test ! -z "$$pldflags"; then \
	    echo "$${prog}_LDFLAGS = $$pldflags" >> $$amfname; \
	fi; if test ! -z "$$plibs"; then \
	    echo "$${prog}_LDADD = $${plibs}" >>$$amfname; \
	fi; if test ! -z "$$pdnames"; then \
	    echo "SUBDIRS = $$pdnames" >>$$amfname; \
	fi; \
	echo "EXTRA_DIST = $${pfnames}" >>$$amfname; \
	echo "AUTOMAKE_OPTIONS = foreign" >>$$amfname; \
	cat $${amfname}.motmp >>$$amfname; rm -f $${amfname}.motmp; \
	echo "$${amfnames}" >.amfnames
	@rm -f .amfnames
	@cat configure.in | egrep -v "^[l][l]:space:[r][r]*AC_OUTPUT" >configure.in.acout
	@for i in `cat .dextracted && rm -f .dextracted`; do \
	    if test ! -z "$$acmfnames"; then acmfnames="$$acmfnames "; fi; \
	    if test $$i = "./"; then i=""; fi; \
	    acmfnames="$${acmfnames}$${i}Makefile"; \
	done; \
	echo "AC_OUTPUT($${acmfnames})" >>configure.in.acout
	@sed "s/^[l][l]:space:[r][r]*AM_INIT_AUTOMAKE\(.*\)/AM_INIT_AUTOMAKE($(PROJNAME), $(PROJVER))/g" <configure.in.acout >configure.in
	@$(RM) configure.in.acout
	@if test ! -z "`egrep '^[l][l]:space:[r][r]*AM_CONFIG_HEADER' configure.in`"; then \
	    if test ! -f config.h.in; then autoheader; fi; \
	fi
	[if gettextized]$(MAKE) -f Makefile.func gettext
	[endif]$(WANT) aclocal; autoconf
	-$(WANT) automake -a -c

gettext:
	@for i in `ls po/*.po`; do linguas="`basename $$i .po` $$linguas"; done; \
	cat configure.in | egrep -v "^[l][l]:space:[r][r]*AM_GNU_GETTEXT|^[l][l]:space:[r][r]*ALL_LINGUAS" >configure.in.acout; \
	if test ! -z "$$linguas"; then \
	    cat configure.in | egrep -v "^[l][l]:space:[r][r]*AM_GNU_GETTEXT|^[l][l]:space:[r][r]*ALL_LINGUAS|^[l][l]:space:[r][r]*AC_OUTPUT" >configure.in.acout; \
	    echo "ALL_LINGUAS=\"`echo $$linguas | sed 's/^[l] [r]*\(.*\)[l] [r]*$$/\1/g' `\"" \
		>>configure.in.acout; \
	    echo "AM_GNU_GETTEXT" >>configure.in.acout; \
	    cat configure.in | egrep "^[l][l]:space:[r][r]*AC_OUTPUT" | \
		sed 's/^\s*AC_OUTPUT(\(.*\))/AC_OUTPUT(\1 po\/Makefile.in intl\/Makefile)/g' \
		>>configure.in.acout; \
	    if test ! -z "`egrep '^\s*SUBDIRS' Makefile.am`"; then \
		sed 's/^\s*SUBDIRS[l] 	=[r]*\(.*\)$$/SUBDIRS = intl po \1/g' <Makefile.am >Makefile.am.motmp; \
	    else \
		echo "SUBDIRS = intl po" >Makefile.am.motmp; cat Makefile.am >>Makefile.am.motmp; \
	    fi; \
	    mv Makefile.am.motmp Makefile.am; \
	    if test ! -f po/Makefile.in.in; then yes | gettextize -c -f --no-changelog; fi; \
	    echo -n >po/POTFILES.in; for i in $(SOURCES) $(HEADERS); do echo $$i >>po/POTFILES.in; done; \
	    touch po/ChangeLog; \
	fi; \
	mv configure.in.acout configure.in
[endif]
makesure:
	@for i in $(ALL_FILES) $(BUILDF); do \
	    if test ! -f $$i; then touch $$i; fi; \
	done

tags:
	[pre off]
ctags --excmd=number -f -
[loop 0;{fscript};1]
 [value fscript.{^loopvalue}]
[loopend]
[pre on]

target: ready
	@CFLAGS="-O0 -g" CXXFLAGS="-O0 -g" $(MAKE) ${MOTOR_TARGET}

gnudoc:
	touch INSTALL NEWS README COPYING AUTHORS ChangeLog

.PHONY: build update debug automake dist rpm start makesure distextra \
    distlib gettext target linklibs gnudoc
